@layer resets, layout,
utilities,
theme,
typography;

@font-face {
    font-family: "Just";
    src: url("./assets/JUST Sans Variable.ttf") format("truetype");
    font-weight: 300 900;
    font-feature-settings: "dlig" on, "ordn" on, "ss02" on;
    font-display: swap;
}

body {
    --section-bdr-img: linear-gradient(var(--system-color-dark), var(--system-color-dark)) 1 fill / 0 / 1.5em 100vi 0;
    margin: 0;
    font-family: "Just", -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
        sans-serif;
    line-height: 1.5;
    letter-spacing: .01em;
    word-spacing: 0.05em;
}

@layer typography {
    :is(h1, h2, h3, h4, p, .fluid-type, footer a) {
        font-size: clamp(var(--f-size, 1rem) * clamp(0.5, 1 - var(--f-size-diff, 0.3), 0.9),
                var(--f-size-fluid, var(--default-fluid, 3vw)),
                var(--f-size, 1rem));
    }

    :is(h1, h2, h3) {
        text-transform: uppercase;
    }

    h1 {
        --f-size: 3.5rem;
        --f-size-diff: 0.4;
    }

    h2 {
        --f-size: 2.5rem;
        --f-size-diff: 0.45;
    }

    :is(h3, h4) {
        --f-size: 1.75rem;
    }

    @supports (font-size: 1cqi) {
        :is(h1, h2, h3, h4, p, .fluid-type, footer a) {
            --default-fluid: 5cqi;
        }
    }
}

@layer resets {
    :is(*, ::before, ::after) {
        box-sizing: border-box;
    }

    :is(h2, h3, h4) {
        line-height: 1.2;
        overflow-wrap: break-word;
        hyphens: auto;
        letter-spacing: 0.03em;
    }

    h1 {
        line-height: 1.1;
        letter-spacing: 0.04em;
    }

    :is(body, h1, h2, h3, dl, dt, dd, p) {
        margin: 0;
    }

    img {
        max-inline-size: 100%;
        height: auto;
        display: block;
    }

    :is(ul, ol, fieldset, legend, menu) {
        margin: 0;
        padding: 0;
    }

    :is(summary, ul):where([class]) {
        list-style: none;
    }

    :is(button, fieldset) {
        border: none;
    }

    dialog {
        position: fixed;
        inset: 0;
        margin: auto;
    }

    a:not([class]) {
        --outline-style: dashed;
        text-decoration-thickness: max(0.08em, 1px);
        text-underline-offset: 0.15em;
        color: inherit;
    }

    a:not([class]):where(:focus-visible, :hover) {
        color: var(--system-color-paleOrange);
        text-decoration: currentColor wavy underline;
    }

    :focus-visible {
        --outline-size: max(2px, .3em);
        outline: var(--outline-width, var(--outline-size)) var(--outline-style, solid) var(--outline-clr, currentColor);
        outline-offset: var(--outline-offset, var(--outline-size));
    }

    :target {
        scroll-margin-block-start: 2rem;
    }

    :focus {
        scroll-margin-block-end: 8vh;
    }

    input:where([type="text"]) {
        padding: 0.75em;
        caret-color: var(--system-color-orange, currentColor);
    }

    :is(a, button, input):focus:not(:focus-visible) {
        outline: none;
    }

    p:where(:not([class])) {
        text-wrap: balance;
        max-inline-size: var(--p-width, 50em);
    }
}

@layer utilities {


    [data-icon-position="start"]::before,
    [data-icon-position="end"]::after {
        content: "";
        min-inline-size: var(--icon-size, 1.5em);
        aspect-ratio: var(--icon-ratio, 1);
        display: inline-block;
        background-color: var(--icon-fill, currentColor);
        transform: var(--icon-transform, none);
        clip-path: var(--icon-clip, none);
        gap: .25em;
    }

    [data-icon-position="start"]:where(:enabled, a):where(:hover, :focus-visible)::before,
    [data-icon-position="end"]:where(a, :enabled):where(:hover, :focus-visible)::after {
        --icon-fill: var(--icon-fill-hover, currentColor);
        --icon-transform: var(--icon-hoverTransform, inherit);
    }

    [data-icon="arrow_right"] {
        --icon-clip: url(#arrow_left);
        --icon-transform: rotate(180deg);
        --icon-hoverTransform: rotate(180deg) translateX(0.5em);
    }

    a {
        --outline-style: dashed;
        text-transform: uppercase;
        font-weight: 700;
    }

    i {
        color: var(--idiomatic-clr, var(--system-color-orange));
        letter-spacing: var(--idomatic-spacing, inherit);
        text-transform: uppercase;
        font-style: normal;
    }

    img:where(.categories *) {
        border-image: radial-gradient(hsla(0, 0%, 0%, 0.4) 15%, #0000 70%) var(--s, 0% 50% 100%) / 50% /0 15px 20px;
    }

    a:where(:is(.categories, nav) *) {
        text-decoration: none;
        display: inline-flex;
        align-items: center;
    }

    :where([aria-hidden="true"], .visually-hidden, .xl-show) {
        position: absolute;
        clip-path: inset(50%);
    }


    .xl-show {
        visibility: hidden;
    }

    button.xl-remove[aria-pressed="true"] {
        --m: 0 70;
        --so: -41;
        --c: 53, 42;
    }

    .categories {
        --outline-style: dashed;
        --outline-clr: var(--system-color-dark);
        --icon-fill: var(--system-color-orange);
        --c-space: 2.5rem;
        padding: 2.5em 1.5em 1.5em;
        background-color: var(--system-color-white);
        inline-size: var(--size, 100%);

        & a::before {
            content: "";
            position: absolute;
            inset: 0;
        }


    }

    [data-menu-opened] .categories {
        position: fixed;
        transform: translateX(var(--translation, -50vb));
        opacity: 0;
        visibility: hidden;
    }

    [data-menu-opened="true"] .categories {
        --translation: none;
        --size: 100vi;
        opacity: 1;
        z-index: 2;
        inset: 3rem 0 auto;

        &::before {
            content: "";
            position: absolute;
            inset: 100% 0 -100vb;
            background-color: hsla(0, 0%, 0%, 0.4);
        }
    }

    .branding>img {
        border-radius: .5rem;
        align-self: stretch;
        max-block-size: var(--img-h, 300px);
        min-inline-size: var(--img-w, 100%);
        object-fit: cover;
        object-position: top 2% left 5%;
    }

    .no-padding {
        --min-padding: 0;
    }

    [data-cart="reduced"] {
        --delta: -0.4;
    }

    [data-cart] {
        margin-inline-start: var(--cart-margin, auto);
        position: relative;

        &:is([data-items])::before {
            content: attr(data-items);
            display: inline-grid;
            place-items: center;
            color: var(--system-color-pale);
            background-color: var(--system-color-orange);
            border-radius: 50%;
            position: absolute;
            inline-size: 1.5em;
            aspect-ratio: 1;
            inset-inline-start: calc(50% - .4em);
            inset-block-start: -1.6em;
            font-size: .75em;
            padding: .125em;
        }
    }

    :where(.categories > article, .branding) {
        container: section / inline-size;
    }

    .categories>article {
        --color-fill: hsl(0, 0%, 94%);
        --radius: .5rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;

        &> :first-child {
            margin-block-start: -3em;
        }
    }

    :is(main, footer, nav) {
        max-inline-size: min(95vi, 1110px);
        margin-inline: auto;
    }

    @media screen and (min-width: 768px) {
        .categories {
            --col-dir: row;

            &>* {
                flex-grow: 2;
            }
        }

        .xl-show {
            position: static;
            clip-path: none;
            visibility: visible;
        }

        .branding {
            --col-dir: row-reverse;
            --col-align: center;
            --p-width: 28rem;
            --f-size-diff: 0.5;
            --i-alignment: space-between;
            --img-w: 40cqi;
            --img-h: 100%;
            min-block-size: 500px;

        }

    }

}

@layer theme {
    :root {
        --system-color-dark: hsl(0, 0%, 6%);
        --system-color-orange: hsl(21, 71%, 44%);
        --system-color-paleOrange: hsl(21, 94%, 75%);
        --system-color-pale: hsl(0, 0%, 98%);
        --system-color-gray: hsl(0, 0%, 95%);
        --system-color-black: hsl(0, 0%, 0%);
        --system-color-white: hsl(0, 0%, 100%);
    }
}

@layer layout {
    .stack>*+* {
        margin-block-start: var(--s-space, 1.5em);
    }

    :is(.row, .column, .segragator) {
        display: flex;
        align-items: var(--alignment, center);
        gap: var(--r-space, var(--c-space, 1.5em));
        justify-content: var(--i-alignment, start);
    }

    .segragator {
        --i-alignment: space-between;
        flex-flow: var(--direction, row) var(--wrap, nowrap);
    }

    .row {
        --alignment: var(--row-align, center);
        flex-flow: var(--row-dir, row) var(--wrap, nowrap);
    }

    .column {
        --alignment: var(--col-align, stretch);
        flex-flow: var(--col-dir, column) var(--wrap, nowrap);
    }

    .center {
        display: grid;
        place-items: center;
        place-content: center;
        gap: var(--s-space, 1.5em);
    }

    :is(header, footer, main, .box, button) {
        padding: var(--min-padding, 1.5em);
        background-color: var(--color-fill, transparent);
        color: var(--color-text, currentColor);
        border-radius: var(--radius, 0);
    }

    :is(.template-grid, footer) {
        --col-align: center;
        display: grid;
        grid-template: var(--g-template);
        container: var(--container-name, grid) / inline-size;
        gap: var(--g-gap, 1rem);

        &> :first-child {
            grid-area: area1;
        }

        &> :nth-child(2) {
            grid-area: area2;
        }

        &> :nth-child(3) {
            grid-area: area3;
        }

        &> :nth-child(4) {
            grid-area: area4;
        }

        &> :nth-child(5) {
            grid-area: area5;
        }
    }

    :is(footer, header) {
        --color-text: var(--system-color-white);
        --color-fill: var(--system-color-dark);
    }

    footer {
        --min-padding: 2em 1.5em 1.5em;
        --g-template: ". area1 ." ". area2 ." "area3 area3 area3" "area4 area4 area4" "area5 area5 area5";
        --c-space: .75rem;
        border-image: linear-gradient(var(--system-color-dark), var(--system-color-dark)) 1 fill / 50%/ 0 100vi;
    }

    footer::before {
        content: "";
        position: absolute;
        inline-size: 101px;
        block-size: 4px;
        background: var(--system-color-orange);
        inset-inline-start: var(--deco-pos, calc(50% - 50.5px));
    }

    footer>p:last-of-type {
        text-transform: capitalize;
    }

    nav {
        --min-padding: 1.5em 0;
        --color-text: var(--system-color-pale);
        border-image: var(--section-bdr-img);
        position: sticky;
        inset-block-start: 0;
        z-index: 3;
        isolation: isolate;

        &::after {
            content: "";
            position: absolute;
            background-color: hsla(0, 0%, 100%, 0.4);
            block-size: 1px;
            inset: auto var(--deco-outset, -50vi) 0;
        }
    }

    @media screen and (min-width: 480px) {
        nav {
            --deco-outset: 0;
        }

        footer {
            --deco-pos: 0;
            --min-padding: 1.5em 0;
            --col-dir: row;
            --g-template: "area1 area1 area1" "area2 area2 area2" "area3 area3 area3" "area4 area4 area5" / 1fr 1fr max-content;

        }
    }

    @media screen and (min-width: 768px) {
        .xl-remove {
            display: none;
        }

        footer {
            --g-template: "area1 area2 area2" "area3 area3 ." "area3 area3 area5" "area4 area4 .";
        }

        footer>ul {
            justify-self: end;
        }

        nav {
            --i-alignment: space-between;
            --cart-margin: 0;
        }

    }
}

@media (prefers-reduced-motion: no-preference) {
    button.xl-remove {
        --h-transition: stroke-dasharray .6s cubic-bezier(.25, .1, .3, 1.5),
            stroke-dashoffset .6s cubic-bezier(.25, .1, .3, 1.5);
    }

    :is([data-cart="added"], [data-cart="reduced"]):where([data-items])::before {
        animation: jiggle .35s cubic-bezier(.25, .1, .3, 1.5) forwards;
    }

    a, [data-icon-position="start"]::before, [data-icon-position="end"]::after {
        transition: all 0.35s ease-out;
    }

    .categories {
        transition: opacity 0.1s ease-out, transform 0.35s 0.1s ease-out;
    }
}

@keyframes jiggle {

    20%,
    60%,
    80% {
        transform: scale(calc(1 + var(--delta, 0.4)));
    }

    from,
    40%,
    to {
        transform: scale(1);
    }
}
